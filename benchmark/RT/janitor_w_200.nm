// GRID WORLD MODEL OF ROBOT AND JANITOR
// adapted from Hakan Younes/gxn/dxp 04/05/04

mdp

// CONSTANTS
const int n = 200; // size of the grid

// the following formulae return 1 or 0 depending on whether
// the janitor can move in that direction or not
formula right = min(1,max(n-x2,0));
formula left = min(1,max(x2-1,0));
formula up = min(1,max(n-y2,0));
formula down = min(1,max(y2-1,0));

formula done = (started & (x1=n)&(y1=n));

module master
    started : bool;
    turn : bool;

    [placement] !started -> (started'=true);
    [ju] started & !done & turn -> (turn'=!turn);
    [jd] started & !done & turn -> (turn'=!turn);
    [jr]  started & !done & turn -> (turn'=!turn);
    [jl]  started & !done & turn -> (turn'=!turn);

    [rr]  started & !done & !turn -> (turn'=!turn);
    [ru]  started & !done & !turn -> (turn'=!turn);
endmodule

module robot

	x1 : [1..n]; // x position of robot
	y1 : [1..n]; // y position of robot

	[rr] x1<n & !(x1+1=x2 & y1=y2) -> 1 : (x1'=x1+1); // moves right until wall
	[ru] x1=n & y1<n & !(x1=x2 & y1+1=y2) -> 1 : (y1'=y1+1); // moves up until wall

endmodule

module janitor

	x2 : [1..n]; // x position of janitor
	y2 : [1..n]; // y position of janitor

	[ju] !(y2=n | (y2+1=y1 & x2=x1) | done) -> 1 : (y2'=y2+1); // moves up
	[jd] !(y2=1 | (y2-1=y1 & x2=x1) | done)  -> 1 : (y2'=y2-1); // moves down
	[jl] !(x2=1 | (x2-1=x1 & y2=y1) | done)  -> 1 : (x2'=x2-1); // moves left
	[jr] !(x2=n | (x2+1=x1 & y2=y1) | done) -> 1 : (x2'=x2+1); // moves right

endmodule

init (started=false)&(turn=false)&(x1=1)&(y1=1)&(x2=n)&(y2=n-1) endinit

label "init1" = (!started);
label "init2" = (!started);
label "target" = done;
