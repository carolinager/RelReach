mdp

const int n = 4;   // number of chars, there are 2^(8n) options for the password
const int pwd = 1; // secret pwd, in range 0 .. pow(2,8*n)
const int bits = 8; // how many bits does a char have

formula update_pwdi = floor((mod(pwd, pow(2, bits*(i+1))) - mod(pwd, pow(2, bits*i))) / (pow(2, bits*i))); // is always integer anyways, just for type matching
formula update_si = floor((mod(s, pow(2, bits*(i+1))) - mod(s, pow(2, bits*i))) / (pow(2, bits*i)));

module secret_thread1

	s  : [0..pow(2,bits*n)-1]; // different input possibilities for the password
        i  : [0..n];           // iterate through string
        pc : [0..1];           // if-else
        c  : [0..2*n];         // counter of attacker
        e  : [0..1];           // termination
        pwdi : [0..pow(2,bits+1)-1]; // pwd at position i
        si : [0..pow(2,bits+1)-1];   // s at position i
        

	// set pwdi, si to the ith position of pwd, s and increase i
        [upd]  (i<n)&(pc=0)&(e=0) -> (i'=i+1)&(pc'=1)&(pwdi'=update_pwdi)&(si'=update_si);
        
        // if-else
        [if]  (pc=1)&(pwdi!=si)&(e=0) -> (pc'=0)&(e' =1);  // chars dont match
        [else]  (pc=1)&(pwdi=si)&(e=0)  -> (pc'=0);          // chars match
        
        // loop has ended
        [loopend]  (i=n)&(pc=0)&(e=0) -> (e' =1);
        
        // attacker thread
        [a]  (c<2*n)&(e=0) -> (c'=c+1); 

        // loop on termination
        [term]  (e=1)                     -> true;



endmodule

init  (e=0)&(i=0)&(pc=0)&(c=0)&(pwdi=0)&(si=0) endinit

label "init1" = (e=0)&(i=0)&(pc=0)&(c=0)&(s=0);
label "init2" = (e=0)&(i=0)&(pc=0)&(c=0)&(s=1);

label "counter0" = (c=0)&(e=1);
label "counter1" = (c=1)&(e=1);
label "counter2" = (c=2)&(e=1);
label "counter3" = (c=3)&(e=1);
label "counter4" = (c=4)&(e=1);
label "counter5" = (c=5)&(e=1);
label "counter6" = (c=6)&(e=1);
label "counter7" = (c=7)&(e=1);
label "counter8" = (c=8)&(e=1);



